{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","NONE","clickOnSort","ALPHABET","setState","LENGTH","clickOnReverse","clickOnReset","this","isResetVisible","visibleGoods","goods","sort","goodA","goodB","localeCompare","length","reverse","getReorderedGoods","className","type","cn","onClick","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,0GAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA6CE,IAAME,EAAb,4MACEC,MAAkC,CAChCC,YAAY,EACZC,SAAUL,EAASM,MAHvB,EAMEC,YAAc,SAACF,GACb,OAAQA,GACN,KAAKL,EAASQ,SACZ,EAAKC,SAAS,CACZJ,SAAUL,EAASQ,WAGrB,MAEF,KAAKR,EAASU,OACZ,EAAKD,SAAS,CACZJ,SAAUL,EAASU,SAGrB,MAEF,KAAKV,EAASM,KACZ,EAAKG,SAAS,CACZJ,SAAUL,EAASM,SAxB7B,EAkCEK,eAAiB,kBACf,EAAKF,UAAS,SAACN,GAAD,MAAY,CACxBC,YAAaD,EAAMC,gBApCzB,EAwCEQ,aAAe,WACb,EAAKH,SAAS,CACZL,YAAY,EACZC,SAAUL,EAASM,QA3CzB,4CA+CE,WAAU,IAAD,OACP,EAAiCO,KAAKV,MAA9BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SACdS,EAAiBT,IAAaL,EAASM,MAAQF,EAE/CW,EApFH,SACLC,EADK,GAGJ,IADCX,EACF,EADEA,SAAUD,EACZ,EADYA,WAGNW,EAAY,YAAOC,GAmBzB,OAjBAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQd,GACN,KAAKL,EAASQ,SACZ,OAAOU,EAAME,cAAcD,GAE7B,KAAKnB,EAASU,OACZ,OAAOQ,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAITjB,GACFW,EAAaO,UAGRP,EA4DgBQ,CAAkBtB,EAAiBY,KAAKV,OAE7D,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYrB,IAAaL,EAASQ,WAGtCmB,QAAS,kBAAM,EAAKpB,YAAYP,EAASQ,WAT3C,iCAcA,wBACEiB,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,WAAYrB,IAAaL,EAASU,SAGtCiB,QAAS,kBAAM,EAAKpB,YAAYP,EAASU,SAT3C,4BAcA,wBACEe,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,YAAatB,IAGjBuB,QAASd,KAAKF,eAThB,qBAcCG,GACC,wBACEW,KAAK,SACLD,UAAU,4BACVG,QAASd,KAAKD,aAHhB,sBAUJ,6BACGG,EAAaa,KAAI,SAAAC,GAChB,OACE,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,eAhHvB,GAAyBC,IAAMC,WC5D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7846b697.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((goodA, goodB) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return goodA.localeCompare(goodB);\n\n      case SortType.LENGTH:\n        return goodA.length - goodB.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\n// type State = {\n//   isReversed: boolean,\n//   sortType: SortType,\n// };\n\nexport class App extends React.Component<{}, ReorderOptions> {\n  state: Readonly<ReorderOptions> = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  clickOnSort = (sortType: SortType) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        this.setState({\n          sortType: SortType.ALPHABET,\n        });\n\n        break;\n\n      case SortType.LENGTH:\n        this.setState({\n          sortType: SortType.LENGTH,\n        });\n\n        break;\n\n      case SortType.NONE:\n        this.setState({\n          sortType: SortType.NONE,\n        });\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  clickOnReverse = () => (\n    this.setState((state) => ({\n      isReversed: !state.isReversed,\n    }))\n  );\n\n  clickOnReset = () => {\n    this.setState({\n      isReversed: false,\n      sortType: SortType.NONE,\n    });\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n    const isResetVisible = sortType !== SortType.NONE || isReversed;\n\n    const visibleGoods = getReorderedGoods(goodsFromServer, this.state);\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={cn(\n              'button',\n              'is-info',\n              {\n                'is-light': sortType !== SortType.ALPHABET,\n              },\n            )}\n            onClick={() => this.clickOnSort(SortType.ALPHABET)}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={cn(\n              'button',\n              'is-success',\n              {\n                'is-light': sortType !== SortType.LENGTH,\n              },\n            )}\n            onClick={() => this.clickOnSort(SortType.LENGTH)}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={cn(\n              'button',\n              'is-warning',\n              {\n                'is-light': !isReversed,\n              },\n            )}\n            onClick={this.clickOnReverse}\n          >\n            Reverse\n          </button>\n\n          {isResetVisible && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.clickOnReset}\n            >\n              Reset\n            </button>\n          )}\n\n        </div>\n        <ul>\n          {visibleGoods.map(good => {\n            return (\n              <li key={good} data-cy=\"Good\">{good}</li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}